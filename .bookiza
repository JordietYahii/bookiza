# -------------------------------------------------#
#            BOOKIZA SUPERBOOK WRITERS             #
# -------------------------------------------------#


# ---------- main() class --------- #

bookiza() {
  case "$1" in
    new)
      new "$@"
      ;;         
    insert)
      insert "$@"
      ;;         
    add)
      add "$@"
      ;;             
    remove)
      remove "$@"
      ;;
    length)
      length
      ;;
    status)
      status
      ;;
    push)
      push
      ;;        
    publish)
      publish
      ;;        
    server)
      server "$@"
      ;;   
    help)
      help      
      ;;         
    update)
      update
      ;;
    -v)
      version
      ;;
    *)
      echo $"Usage: $0 { new | insert | length | remove | status | push | publish | server | help | update | -v }"
      echo $"Try: $ bookiza help "
  esac
}

#--------- NEW PROJECT ---------#

new() {
  args=("$@")

  echo "Executing $ bookiza ${args[0]} ........"

  PROJECTNAME=${args[1]}

  readValidProjectName "$PROJECTNAME"

  setupProject "$PROJECTNAME"

  BOOKLENGTH=${args[2]}

  readValidBookLength "$BOOKLENGTH"
  
  START_AT=0

  (cd manuscript || exit; createPages "$START_AT" "$BOOKLENGTH")

  setupRepo
}

#-------- project name ------ ##

isValidArgument() {
  test "$1" 
}

readValidProjectName() {
  PROJECTNAME=$1
  while ! isValidArgument "$PROJECTNAME"; do
    echo -e "Project name?: \c"
    read -r PROJECTNAME
  done
}

setupProject() {
  mkdir -p "$1" && cd "$1" && touch README.md license.txt .gitignore && mkdir "trash" "cover" "templates" "images" "manuscript" || return $?
  echo "# $1" >> README.md
  (cd templates || exit; touch template.html head.html template.css template.js)
}

## ------ Book length ------ ##

readValidBookLength() {
  BOOKLENGTH=$1

  while ! { isValidArgument "$BOOKLENGTH" && isArgumentNumeric "$BOOKLENGTH" && isArgumentEvenNumber "$BOOKLENGTH"; }; do
    echo -e 'Book length?: \c'
    read -r BOOKLENGTH
  done

}

isArgumentNumeric() {
  ARGUMENT=$1  
  reg='^[0-9]+$'
  if ! [[ $ARGUMENT =~ $reg ]] ; then
    return 1
  else
    return 0
  fi
}

isArgumentEvenNumber() {
  ARGUMENT=$1
  if [ $((ARGUMENT%2)) -eq 0 ] ; then
    return 0
  else
    return 1
  fi  
}

setupRepo() {
  git init
  git add . -A
  git commit -am "First commit: Setup new book project" --quiet  
  readValidRepoURL "$REPO_URL"
  git remote add origin "$REPO_URL"
  git push -u origin master
  echo "Project is ready!"   
}

isValidRepoURL() {
  test "$1"
}

readValidRepoURL() {
  REPO_URL=$1
  while ! isValidRepoURL "$REPO_URL"; do
    echo -e "Repository URL?: \c"
    read -r REPO_URL
  done
}


# ---------- INSERT PAGES --------- #

insert() {
  args=("$@")

  echo Type: ${args[0]}, INSERT_AT: "${args[1]}", [ No. of pages: "${args[2]}"]

  INSERT_AT=${args[1]}

  readValidInsertAt "$INSERT_AT"
  
  NUMBER_OF_PAGES=${args[2]}

  readValidNumberOfPages "$NUMBER_OF_PAGES"

  return 

  (cd manuscript || exit; createPages "$BOOKLENGTH") # Make the create pages method reusable
  (generatePages $INSERT_AT $NUMBER_OF_PAGES)

}

readValidInsertAt() {
  INSERT_AT=$1

  while ! { isValidArgument "$INSERT_AT" && isArgumentNumeric "$INSERT_AT" && isArgumentInRange "$INSERT_AT"; }; do
    echo -e 'Insert at?: \c'
    read -r INSERT_AT
  done
}

isArgumentInRange() {
  ARGUMENT=$1  

  length # Fetches & prints current BOOKLENGTH

  if ! [[ $ARGUMENT lt $BOOKLENGTH && $ARGUMENT ge 0]] ; then
    return 1
  else
    return 0
  fi

  
}

readValidNumberOfPages() {
  NUMBER_OF_PAGES=$1
  while ! { isValidArgument "$NUMBER_OF_PAGES" && isArgumentNumeric "$NUMBER_OF_PAGES" && isArgumentEvenNumber "$NUMBER_OF_PAGES"; }; do
    echo -e 'Number of pages?: \c'
    read -r NUMBER_OF_PAGES
  done
}


createPages() {
  args=("$@")

  echo "START_AT: ${args[0]}, [ Number of pages/ Book length: ${args[1]} ]"

  NUMBER_OF_PAGES=${args[1]}

  COUNT=${args[0]}

  while [ "$COUNT" -lt "$NUMBER_OF_PAGES" ]; do
    COUNT=$((COUNT+1))
    mkdir -p "page-$COUNT"
    (cd "page-$COUNT" || exit; touch "body.html" && touch "style.css"; echo "body{background:rgba(200, 235, 255, 0.99); margin:0 0; overflow:hidden;}" >> style.css)
  done  
}



generatePages() {
  args=("$@")
  echo INSERT_AT: "${args[0]}", [ Number of pages: "${args[1]}" ]

  p="$INSERT_AT"

  if [ -d "page-$p"  ]; then
    getLength
    q="$BOOKLENGTH"
    while [ "$q" -ge "$p" ]; do
      mv "page-$((q))" "page-$((q+NUMBER_OF_PAGES))"
      q=$((q-1))
    done

    q=0
    while [ "$q" -lt "$NUMBER_OF_PAGES" ]; do
      mkdir -p "page-$((p+q))"
      cd "page-$((p+q))"

      touch "body.html"
      touch "style.css"
      q=$((q+1))
      cd ".."
    done
  fi
}

# ---------- ADD PAGES --------- #

add() {
  args=("$@")

  echo Number of arguments passed =: $#
  echo "Method: $ bookiza ${args[0]}, Requested no. of pages: ${args[1]}"

  NUMBER_OF_PAGES=${args[1]}

  if [ ${NUMBER_OF_PAGES:+x} ] ; then
    validateNumberOfPages $NUMBER_OF_PAGES
  else
    NUMBER_OF_PAGES=2
  fi

  (length; echo "Number of pages = ${NUMBER_OF_PAGES}")

  (cd manuscript; addtostack)
   
  (length; "Added ${NUMBER_OF_PAGES} pages!")
}


addtostack() {
  getLength
  
  echo "Requested no = ${NUMBER_OF_PAGES}"

  echo "Shout the book length again: ${BOOKLENGTH}"

  q=1
  while [ "$q" -le "$NUMBER_OF_PAGES" ]; do
    mkdir -p "page-$((BOOKLENGTH+q))"
    cd "page-$((BOOKLENGTH+q))"
    touch "body.html"
    touch "style.css"
    q=$((q+1))
    cd ".."
  done  
  echo "Finished adding pages to the stack!"
}

# --------- REMOVE PAGE_No ----------#


remove() {
  args=("$@")

  echo Number of arguments passed =: $#
  echo "Type: ${args[0]}, Page number: ${args[1]}"

  cd "manuscript"
  PAGE_NO="${args[1]}"

  if [ ${PAGE_NO:+x} ] ; then
    trashPage $PAGE_NO
  else
    validatePageNo $PAGE_NO
  fi
  getLength
  cd ".."
}

trashPage() {
  args=("$@")
  echo PAGE_NO: "${args[0]}", [ Blah: "${args[1]}" ]

  PAGE_NO="${args[0]}"

  if [ -d "page-$PAGE_NO"  ]; then
    mv "page-$PAGE_NO" "../trash/page-$PAGE_NO"

    m="$PAGE_NO"
    echo "Starting directory reduction"
    m=$((m+1))

    until [ ! -d "page-$m"  ]; do

      mv "page-$((m))" "page-$((m-1))"
      m=$((m+1))
    done
  fi

}



# ---------- BOOKLENGTH --------- #

length() {
  if [ -d manuscript/ ] ; then
    (cd manuscript; getLength)
  else 
    echo "Manuscript not found, probably not in project root!"
  fi
}

getLength() {
  BOOKLENGTH=1
  until [ ! -d "page-$((BOOKLENGTH+1))"  ]; do
    BOOKLENGTH=$((BOOKLENGTH+1))
  done
  echo "Book length is: ${BOOKLENGTH} pages"
  return
}

# --------- PROJECT STATUS ----------#

status() {
  git status
}


# --------- PUSH TO REPO ----------#

push() {
  readValidGitMessage "$MESSAGE"
  git commit -am "${MESSAGE}"
  git push
}


isValidGitMessage() {
  test "$1"
}

readValidGitMessage() {
  MESSAGE=$1
  while ! isValidGitMessage "$MESSAGE"; do
    echo -e "Message: \c"
    read -r MESSAGE
  done
}

# --------- PUBLISH TO BUBBLIN ----------#

publish() {
  echo "# TODO: Expose authenticated POST API on https://bubbl.in"
  readValidHostURL "$HOST_URL"          # TODO: HOST_URL can be constructed using hyphenated $projectname & author-full-name
  git remote add origin "$HOST_URL"
  git push -u origin master
}

isValidHostURL() {
  test "$1"
}

readValidHostURL() {
  HOST_URL=$1
  while ! isValidHostURL "$HOST_URL"; do
    echo -e "Bubblin URL?: \c"
    read -r HOST_URL
  done
}

# ---------- LOCAL SERVER --------- #

server() {
  echo "No server yet" 
  # start
  # stop
  # handle wrong inputs or no inputs
} 

# --------- FRAMEWORK GUIDE --------#

help() {
  
echo "
# -------------------------------------------------#
#            BOOKIZA SUPERBOOK FRAMEWORK           #
# -------------------------------------------------#
"
echo "

Usage: $ bookiza <command> [<args>]
  
Commands glossary: $0 { new | insert | length | remove | status | push | publish | server | help | update | -v }

"

echo "
  $ bookiza new [hyphenated-project-name] [expected number of pages] 
    Examples:    
      1. Project/book name: My-Awesome-Book-Name i.e. use hyphens!
      2. Book length: 24, 100       (Must be even number. Here's why: https://bubbl.in/book/official-handbook-by-marvin-danig/36)
      3. Github URL: https://github.com/username/my-new-book.git     
"

echo "
  $ bookiza insert [insert_at] [number_of_pages] 
    Examples:    
      1. insert_at: 31, 44          (Must be integer)
      2. number_of_pages: 4, 8      (Must be even number)
"


} 


# ---------- UPDATE SCRIPT --------- #

update() {
  (cd ~/.bookiza; git pull; source ~/.bash_profile; version)
}

# ---------- VERSION --------- #

version() {
  echo "bookiza 0.0.1"
}