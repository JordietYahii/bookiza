#--------- NEW PROJECT ---------#

new() {
  args=("$@")

  echo Number of arguments passed =: $#
  echo "Type: ${args[0]}, Project: ${args[1]} Booklength: ${args[2]}"
  

  PROJECTNAME=${args[1]}

  if [ ${PROJECTNAME:+x} ] ; then
    echo "Proceeding ........"
  else 
    echo "Halting ..........."
    validateProjectName $PROJECTNAME
  fi
  
  setupProject $PROJECTNAME

  
  BOOKLENGTH=${args[2]}

  if [ ${BOOKLENGTH:+x} ] ; then
    echo "Proceeding ........"
    validateNumeric $BOOKLENGTH
  else 
    echo "Halting ..........."
    validateBookLength $BOOKLENGTH
  fi
    
  createPages $BOOKLENGTH

  setupGitRepository 
}

###### Validations ######

validateProjectName() {
  if [[ $# -eq 0 ]] ; then
    echo "Project name not supplied. (HINT: My-New-Book-Name i.e. use hypens!)"
    read PROJECTNAME
    if [ ${PROJECTNAME:+x} ] ; then
      return 
    else 
      echo "Halting ..."
      validateProjectName $PROJECTNAME
    fi
    exit
  fi  
}

validateBookLength() {
  if [[ $# -eq 0 ]] ; then
    echo "Book length not supplied. (HINT: Must be even number i.e. 6, 12, 24!)"
    read BOOKLENGTH
    if [ ${BOOKLENGTH:+x} ] ; then
      validateNumeric $BOOKLENGTH
      return $BOOKLENGTH
    else 
      echo "Halting ..."
      validateBookLength $BOOKLENGTH
    fi
    exit
  fi  
}

validateNumeric() {
  BOOKLENGTH=$1
  reg='^[0-9]+$'
  if ! [[ $BOOKLENGTH =~ $reg ]] ; then
    echo "Error: Argument not a number, try again:" >&2;
    read BOOKLENGTH
    validateNumeric $BOOKLENGTH
  else
    validateEven $BOOKLENGTH
  fi
}

validateEven() {
  BOOKLENGTH=$1
  echo "Testing if ${BOOKLENGTH} is even now"
  if [ $((BOOKLENGTH%2)) -eq 0 ] ; then
    echo "Ok ....... Proceeding"
    echo "Setting book length = $BOOKLENGTH"
    return $BOOKLENGTH
  else
    echo "Error: Not an even number, try again:" >&2;
    read BOOKLENGTH
    validateEven $BOOKLENGTH
  fi  
}

setupProject() {
  echo "Setting up $PROJECTNAME now ..."
  mkdir -p "$1" && cd "$1" && touch README.md license.txt .gitignore && mkdir "trash" "cover" "templates" "images" "manuscript" || return $?
  echo "# $1" >> README.md
  cd "templates" && touch template.html head.html template.css template.js && cd ".."
}

createPages() {
  PAGES=$1
  cd "manuscript"
  p=0
  while [ "$p" -lt "$PAGES" ]; do
    p=$((p+1))
    mkdir -p "page-$p"
    cd "page-$p"
    touch "body.html"
    touch "style.css"
    echo "body{background:rgba(200, 235, 255, 0.99); margin:0 0; overflow:hidden;}" >> style.css
    cd ".."
  done  
  echo "Done!" && cd ".." #Head back to root
}

setupGitRepository() {
  git init
  git add . -A
  git commit -am "First commit: Setup new book project" --quiet
  echo "Provide GITHUB URL:"
  read REPO_URL
  if [ ${REPO_URL:+x} ] ; then
    git remote add origin "$REPO_URL"
    git push -u origin master
    echo "Project ready! Stacked ${PAGES} blank pages inside /manuscript correctly."   
  else
    echo "Error: Argument not supplied, try again!"
    read REPO_URL
  fi
}